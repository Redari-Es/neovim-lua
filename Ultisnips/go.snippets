##
priority -100
# TODO: go-snippets  <26-09-21, Redari-Es> #
##
snippet err "err"
if err!=nil{
	log.Panic(err)
}
$0
endsnippet

snippet check "Check Error"
if err != nil {
	return err
}
${0}
endsnippet

snippet checke "checkerro"
if err:=${1};err!=nil{
	fmt.Println(err)
}
endsnippet

snippet cq "Current Question"
app.result.questions[app.curResultIndex]${0}
endsnippet

snippet rune "rune"
var ${1} = []rune(${2})$0
endsnippet
# map 初始化map 类型
snippet map "map"
map:=[]${1:int}{$2}
$0

endsnippet

snippet type "struct"
type ${1} struct{
	${2}
}
$0
endsnippet

snippet any "interface"
type ${1} interface{
	${2}
}
$0
endsnippet

snippet forr "For loop range"
for ${1:_}, ${2:v} := range ${3:struct} {
	${4}
}
$0
endsnippet
snippet forkv "range"
for k,v:=range ${1:struct}{
	$0
}
endsnippet

snippet fori "For loop i"
for ${1:i} := ${2:0}; $1 < ${3:len}; $1++ {
	${4}
}
$0
endsnippet

snippet ie "Check Error"
if err != nil {
	panic(err)
}
${0}
endsnippet

snippet pt "Printf" -i
fmt.Printf(${1})${0}
endsnippet

snippet ptl "Println" -i
fmt.Println(${1})${0}
endsnippet

snippet ft "fprintf" -i
fmt.Fprintf(${1})${0}
endsnippet

snippet ftl "fprintln" -i
fmt.Fprintln(${1})${0}
endsnippet
snippet st "sprintf" -i
fmt.Sprintf(${1})${0}
endsnippet
snippet stl "sprintln" -i
fmt.Sprintln(${1})${0}
endsnippet

snippet dp "Description" -b
/* {date}
** Author: Shon
** Email: shon@redaries.xyz
*/
endsnippet

# start
snippet go "Starting code"
package main

import (
		"fmt"
		"time"
		)

func main() {
	${1}
}
${0}
endsnippet

# Time
snippet tt "Run time" -b
bT:=time.Now()
eT:=time.Since(bT)
fmt.Println("Running cost：%v",eT)
endsnippet

# cost()
snippet cost "func cost" -b
//@brief：耗时统计函数
// defer timeCost()()
func timeCost() func() {
start := time.Now()
				 return func() {
tc:=time.Since(start)
		 fmt.Printf("time cost = %v\n", tc)
				 }
}
endsnippet



# const
snippet const "const"
const(
		${1:}
		)$0
endsnippet

## fuction_name
snippet func "def"
func ${1:func_name}(${2:parse_type}) ${3:return_type}{
	return
}
$0
endsnippet

## fuction_name
snippet funcn "def Noname"
func (${2:parse_type}) ${3:return_type}{
	return
}
$0
endsnippet


# 选择循环
# if
snippet ife "if else"
if $1 == $2;{
	$4
} ${3:else} {
	$5
}$0
endsnippet

# eif
snippet lif "elise if"
else if ${1}{
	$2
}$0
endsnippet

#return
snippet rt "return"
return $1
endsnippet

# := 快速声明
snippet ot ":="
:= $0
endsnippet

# := 初始化
snippet := ":=" -b
$1 := $2
$0
endsnippet
# var
snippet val ""
${1} := ${2}
$0
endsnippet

snippet : ":=" -i
:=$0
endsnippet


snippet str "string" -i
string$0
endsnippet
# list
snippet li "" -b
$1 := []int{$2}$0
endsnippet

# stringlist
snippet ls "" -b
$1 := []string{"$2"}$0
endsnippet

# array
snippet 2] "[][]"
[$1][$2]$0
endsnippet
#map
snippet 2} "{}{}"
{$1},{$2}$0
endsnippet


###Testing
snippet fatal "t.fatal" -b
t.Fatal("$1")$0
endsnippet
## array
snippet . "quick list" -i
[$1]$0
endsnippet

## array
snippet ./ "quick map" -i
{$1}$0
endsnippet

# make
snippet make "m"  -b
make([]$1,$2)$0
endsnippet

### fmt output input bufio
#print
#printf
#println
#Sprint
#Sprintf
#Sprintln
#Scan
#Scanf
#Scanln
#bufio.NewReader(os.Stdin)
#Fscan
#Sscan
